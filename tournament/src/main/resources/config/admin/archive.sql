DROP DATABASE TOURNAMENT_ARCHIVE; 
CREATE DATABASE TOURNAMENT_ARCHIVE;
USE TOURNAMENT_ARCHIVE;

CREATE TABLE TOURNAMENT (
	TOURNAMENT_ID INTEGER NOT NULL PRIMARY KEY,
	NAME VARCHAR(70) NOT NULL,
	TOURNAMENT_TYPE_ID INTEGER,
	LEAGUE_ID INTEGER,
	START_TIME TIMESTAMP NOT NULL,
	PARENT_TOURNAMENT_ID INTEGER,
	START_LEVEL_ID INTEGER
#,
#	FOREIGN KEY(TOURNAMENT_TYPE_ID) REFERENCES TOURNAMENT.TOURNAMENT_TYPE(TOURNAMENT_TYPE_ID),
#	FOREIGN KEY(LEAGUE_ID) REFERENCES TOURNAMENT.LEAGUE(LEAGUE_ID),
#	FOREIGN KEY(PARENT_TOURNAMENT_ID) REFERENCES TOURNAMENT(TOURNAMENT_ID),
#	FOREIGN KEY(START_LEVEL_ID) REFERENCES TOURNAMENT.LEVEL(LEVEL_ID)
);

CREATE TABLE TOURNAMENT_SEED (
	TOURNAMENT_ID INTEGER NOT NULL,
	TEAM_ID INTEGER NOT NULL,
	SEED_ID INTEGER NOT NULL,
	UNIQUE(TOURNAMENT_ID, TEAM_ID)
#,
#	FOREIGN KEY(TOURNAMENT_ID) REFERENCES TOURNAMENT(TOURNAMENT_ID),
#	FOREIGN KEY(TEAM_ID) REFERENCES TOURNAMENT.TEAM(TEAM_ID),
#	FOREIGN KEY(SEED_ID) REFERENCES TOURNAMENT.SEED(SEED_ID)
);


CREATE TABLE GAME (
	GAME_NODE_ID INTEGER NOT NULL,
	TOURNAMENT_ID INTEGER NOT NULL,
	WINNER INTEGER,
	START_TIME TIMESTAMP NOT NULL,
	UNIQUE(GAME_NODE_ID, TOURNAMENT_ID)
#,
#	FOREIGN KEY(GAME_NODE_ID) REFERENCES TOURNAMENT.GAME_NODE(GAME_NODE_ID),
#	FOREIGN KEY(TOURNAMENT_ID) REFERENCES TOURNAMENT(TOURNAMENT_ID),
#	FOREIGN KEY(WINNER) REFERENCES TOURNAMENT.OPPONENT(OPPONENT_ID)
);

# SKIPPING PLAYER

CREATE TABLE TOURNAMENT_ADMIN (
	TOURNAMENT_ID INTEGER NOT NULL,
	ADMIN_ID INTEGER NOT NULL,
	UNIQUE(TOURNAMENT_ID, ADMIN_ID)
#,
#	FOREIGN KEY(ADMIN_ID) REFERENCES TOURNAMENT.PLAYER(PLAYER_ID),
#	FOREIGN KEY(TOURNAMENT_ID) REFERENCES TOURNAMENT(TOURNAMENT_ID)
);



CREATE TABLE GROUP_NAME (
	GROUP_ID INTEGER NOT NULL PRIMARY KEY,
	NAME VARCHAR(70),
	ADMIN_ID INTEGER NOT NULL,
	INVITATION_CODE INTEGER
#,
#	FOREIGN KEY(ADMIN_ID) REFERENCES TOURNAMENT.PLAYER(PLAYER_ID)
);


CREATE TABLE PLAYER_GROUP (
	GROUP_ID INTEGER NOT NULL,
	PLAYER_ID INTEGER NOT NULL,
	UNIQUE(GROUP_ID, PLAYER_ID)
#,
#	FOREIGN KEY(GROUP_ID) REFERENCES GROUP_NAME(GROUP_ID),
#	FOREIGN KEY(PLAYER_ID) REFERENCES TOURNAMENT.PLAYER(PLAYER_ID)
);

CREATE TABLE POOL (
	POOL_ID INTEGER NOT NULL PRIMARY KEY,
	NAME VARCHAR(70) NOT NULL,
	GROUP_ID INTEGER NOT NULL,
	SCORE_SYSTEM_ID INTEGER NOT NULL,
	TOURNAMENT_ID INTEGER NOT NULL,
	BRACKET_LIMIT INTEGER NOT NULL DEFAULT 0,
	SHOW_EARLY CHAR(1) NOT NULL DEFAULT 'Y',
	TIE_BREAKER_TYPE_ID INTEGER NOT NULL DEFAULT 0,
	TIE_BREAKER_QUESTION VARCHAR(254),
	TIE_BREAKER_ANSWER CHAR(30)
#,
#	FOREIGN KEY(GROUP_ID) REFERENCES GROUP_NAME(GROUP_ID),
#	FOREIGN KEY(SCORE_SYSTEM_ID) REFERENCES TOURNAMENT.SCORE_SYSTEM(SCORE_SYSTEM_ID),
#	FOREIGN KEY(TOURNAMENT_ID) REFERENCES TOURNAMENT(TOURNAMENT_ID),
#	FOREIGN KEY(TIE_BREAKER_TYPE_ID) REFERENCES TOURNAMENT.TIE_BREAKER_TYPE(TIE_BREAKER_TYPE_ID)
);

CREATE TABLE BRACKET (
	BRACKET_ID INTEGER NOT NULL PRIMARY KEY,
	PLAYER_ID INTEGER NOT NULL,
	TOURNAMENT_ID INTEGER NOT NULL,
	NAME VARCHAR(70) NOT NULL
#,
#	FOREIGN KEY(PLAYER_ID) REFERENCES TOURNAMENT.PLAYER(PLAYER_ID),
#	FOREIGN KEY(TOURNAMENT_ID) REFERENCES TOURNAMENT(TOURNAMENT_ID)
);

CREATE TABLE BRACKET_POOL (
	BRACKET_ID INTEGER NOT NULL,
	POOL_ID INTEGER NULL DEFAULT NULL,
	TIE_BREAKER_ANSWER CHAR(30),
	UNIQUE(BRACKET_ID, POOL_ID)
#,
#	FOREIGN KEY(BRACKET_ID) REFERENCES BRACKET(BRACKET_ID),
#	FOREIGN KEY(POOL_ID) REFERENCES POOL(POOL_ID)
);

CREATE TABLE PICK (
	BRACKET_ID INTEGER NOT NULL,
	GAME_NODE_ID INTEGER NOT NULL,
	WINNER INTEGER
#,
#	FOREIGN KEY(BRACKET_ID) REFERENCES BRACKET(BRACKET_ID),
#	FOREIGN KEY(GAME_NODE_ID) REFERENCES TOURNAMENT.GAME_NODE(GAME_NODE_ID),
#	FOREIGN KEY(WINNER) REFERENCES TOURNAMENT.OPPONENT(OPPONENT_ID)
);

ALTER TABLE GROUP_NAME ADD COLUMN PARENT_GROUP_ID INTEGER;


# COPY

INSERT IGNORE INTO TOURNAMENT (SELECT * FROM TOURNAMENT.TOURNAMENT);
INSERT IGNORE INTO TOURNAMENT_SEED (SELECT * FROM TOURNAMENT.TOURNAMENT_SEED);
INSERT IGNORE INTO GAME  (SELECT * FROM TOURNAMENT.GAME );
INSERT IGNORE INTO TOURNAMENT_ADMIN   (SELECT * FROM TOURNAMENT.TOURNAMENT_ADMIN  );
INSERT IGNORE INTO GROUP_NAME (SELECT * FROM TOURNAMENT.GROUP_NAME);
INSERT IGNORE INTO PLAYER_GROUP (SELECT * FROM TOURNAMENT.PLAYER_GROUP);
INSERT IGNORE INTO POOL (SELECT * FROM TOURNAMENT.POOL);
INSERT IGNORE INTO BRACKET (SELECT * FROM TOURNAMENT.BRACKET);
INSERT IGNORE INTO BRACKET_POOL (SELECT * FROM TOURNAMENT.BRACKET_POOL);
INSERT IGNORE INTO PICK (SELECT * FROM TOURNAMENT.PICK);

# TRUNCATE ORIGINAL
USE TOURNAMENT;
DELETE FROM PICK;
DELETE FROM BRACKET_POOL;
DELETE FROM BRACKET;
DELETE FROM POOL;
DELETE FROM PLAYER_GROUP;
DELETE FROM GROUP_NAME WHERE GROUP_ID NOT IN (SELECT DISTINCT PARENT_GROUP_ID FROM TOURNAMENT_ARCHIVE.GROUP_NAME WHERE PARENT_GROUP_ID IS NOT NULL);
DELETE FROM GROUP_NAME WHERE GROUP_ID NOT IN (SELECT DISTINCT PARENT_GROUP_ID FROM TOURNAMENT_ARCHIVE.GROUP_NAME WHERE PARENT_GROUP_ID IS NOT NULL);
DELETE FROM GROUP_NAME;

# TRUNCATE SPECIFIC TOURNAMENTS
DELETE FROM TOURNAMENT_ADMIN WHERE TOURNAMENT_ID IN (29, 28, 19, 25, 31);
DELETE FROM GAME WHERE TOURNAMENT_ID IN (29, 28, 19, 25, 31);
DELETE FROM TOURNAMENT_SEED WHERE TOURNAMENT_ID IN (29, 28, 19, 25, 31);
DELETE FROM TOURNAMENT WHERE TOURNAMENT_ID IN (29, 28, 19, 25, 31);
